name = "infinex-multichain"
version = "1.1.0staging"
preset = "O2"
description = "Infinex MultiChain Deployments"
#   ./run pnpm cannon build infinex-multichain/staging/infinex-multichain-optimism.toml --chain-id 10 --private-key
#  CANNON_ETHERSCAN_API_URL=https://api-optimistic.etherscan.io/api ./run pnpm cannon verify infinex-multichain:[version]@O2 --chain-id 10 --api-key 

[var.deploy]
DEPLOYER = "0x3F768E3aC5eE75A2F39CFD7d72Eb3a40Bddb5ecB"
REVENUE_POOL = "0xA2AaEb26212930793eBb936D1DBF77791d277ec4"
MULTI_SIG = "0xA2AaEb26212930793eBb936D1DBF77791d277ec4"
WITHDRAWAL_FEE_USDC = "<%= parseUnits(String(0), 6) %>"
TRUSTED_RECOVERY_KEEPER = "0xf662e118BABcE7d627F7f569B415B474F2189c35"

[clone.infinex]
options.SALT = "INFINEX_1_0_0staging"
options.DEPLOYER = "<%= settings.DEPLOYER %>"
options.REVENUE_POOL = "<%= settings.REVENUE_POOL %>"
options.MINIMUM_BRIDGE_AMOUNT =  "<%= parseUnits(String(0), 6) %>"
options.USDC = "0x0b2c639c533813f4aa9d7837caf62653d097ff85"
options.CIRCLE_BRIDGE = "0x2B4069517957735bE00ceE0fadAE88a26365528f"
options.CIRCLE_MINTER = "0x33E76C5C31cb928dc6FE6487AB3b2C0769B1A1e3"
options.DEFAULT_DESTINATION_CCTP_DOMAIN = "6"
options.WORMHOLE_CIRCLE_BRIDGE = "0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c"
options.DEFAULT_DESTINATION_WORMHOLE_CHAIN_ID = "30" # set the default domain to base for keeper bridging

# ------- Solana Vars ------- #
options.SOLANA_CCTP_DESTINATION_DOMAIN = "5"
options.SOLANA_WALLET_SEED =  "<%= hexlify('wallet_authority') %>"
options.SOLANA_FIXED_PDA_SEED = "<%= hexlify('ProgramDerivedAddress') %>"
options.SOLANA_WALLET_PROGRAM_ADDRESS = "0x0dd613b80b79792f2b77dbc1bc2a88a69da961324d890ed3aa9df8d517a500b3" #gitleaks:allow
options.SOLANA_TOKEN_MINT_ADDRESS = "0xc6fa7af3bedbad3a3d65f36aabc97431b1bbe4c2d2f6e0e47ca60203452f5d61" #gitleaks:allow
options.SOLANA_TOKEN_PROGRAM_ADDRESS = "0x06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9" #gitleaks:allow
options.SOLANA_ASSOCIATED_TOKEN_PROGRAM_ADDRESS = "0x8c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f859" #gitleaks:allow

# ---------- Wormhole Chain Ids ---------- #
options.WORMHOLE_CHAIN_ID_ARBITRUM = "23"
options.WORMHOLE_CHAIN_ID_BASE = "30"
options.WORMHOLE_CHAIN_ID_ETHEREUM = "2"
options.WORMHOLE_CHAIN_ID_OPTIMISM = "24"
options.WORMHOLE_CHAIN_ID_POLYGON = "5"
source = "infinex:1.1.0@O2"
target = "infinex:1.1.0@O2"

# ---------- Setting Post deployment parameters  ---------- #
[invoke.setInfinexProtocolConfigBeaconFee]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setWithdrawalFeeUSDC"
args = [
    "<%= settings.WITHDRAWAL_FEE_USDC %>",
    ]
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

[invoke.setTrustedRecoveryKeeper]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setTrustedRecoveryKeeper"
args = [
    "<%= settings.TRUSTED_RECOVERY_KEEPER %>", 
    true
    ]
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

[invoke.setFundsRecoveryActive]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setFundsRecoveryActive"
args = []
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

# ---------- Update Factory and old beacons  ---------- #
[invoke.AccountFactoryUpdateInfinexProtocolConfigBeacon]
target = ["infinex.AccountFactory"]
func = "updateInfinexProtocolConfigBeacon"
args = ["<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"]
fromCall.func = "owner"
depends = ["clone.infinex","invoke.OldBeaconSetLatestInfinexProtocolConfigBeacon"]

[pull.infinexOld]
source = "infinex-multichain:1.0.0staging@O2"

[invoke.OldBeaconSetLatestInfinexProtocolConfigBeacon]
target = ["infinexOld.infinex.InfinexProtocolConfigBeacon"]
func = "setLatestInfinexProtocolConfigBeacon"
args = ["<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"]
fromCall.func = "owner"

# [invoke.AccountFactoryInitialize]
# target = ["infinex.AccountFactory"]
# func = "initialize"
# args = [
#     "<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"
# ]
# from = "<%= settings.DEPLOYER %>"
# depends = ["clone.infinex"]