name = "infinex-core-test"
version = "3.0.0"
preset = "core"
description = "Infinex Core Deployments"
#  pnpm cannon build infinex-multichain/staging/infinex-multichain-polygon.toml --chain-id 137 --dry-run --upgrade-from
#  pnpm cannon publish infinex-core-test:latest@core --chain-id 137 --exclude-cloned
#  pnpm cannon verify infinex-core-test:latest@core --chain-id 137 --api-key

[var.Deploy]
DEPLOYER = "0x6298551D56F825B3b6c3350D32129Ffd3cFb198C"
MULTISIG = "0x85aCda8bA2b2eB1a311426C6CE60942FC6E8a7BE"
REVENUE_POOL = "0x6298551D56F825B3b6c3350D32129Ffd3cFb198C"
WITHDRAWAL_FEE_USDC = "<%= parseUnits(String(0), 6) %>"
TRUSTED_RECOVERY_KEEPER = "0xf662e118BABcE7d627F7f569B415B474F2189c35"

[pull.AccountFactory]
source = "infinex-account-factory:1.0.0@main"

[clone.infinex]
source = "infinex:3.0.0@core"
target = "infinex:3.0.0@core"
options.CORE_SALT = "INFINEX_1_0_0staging"
options.CORE_DEPLOYER = "<%= settings.DEPLOYER %>"
options.CORE_INITIAL_PROXY_IMPLEMENTATION = "<%= imports.AccountFactory.imports.AccountFactory.contracts.InitialProxyImplementation.address %>"
options.CORE_REVENUE_POOL = "<%= settings.REVENUE_POOL %>"
options.CORE_USDC = "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359"
options.CORE_CIRCLE_BRIDGE = "0x9daF8c91AEFAE50b9c0E69629D3F6Ca40cA3B3FE"
options.CORE_CIRCLE_MINTER = "0x10f7835F827D6Cf035115E10c50A853d7FB2D2EC"
options.CORE_DEFAULT_DESTINATION_CCTP_DOMAIN = "6"
options.CORE_WORMHOLE_CIRCLE_BRIDGE = "0x2703483B1a5a7c577e8680de9Df8Be03c6f30e3c"
options.CORE_DEFAULT_DESTINATION_WORMHOLE_CHAIN_ID = "30"                                                                                       # set the default domain to base for keeper bridging
# ------- Solana Vars ------- #
options.CORE_SOLANA_CCTP_DESTINATION_DOMAIN = "5"
options.CORE_SOLANA_WALLET_SEED = "<%= hexlify('wallet_authority') %>"
options.CORE_SOLANA_FIXED_PDA_SEED = "<%= hexlify('ProgramDerivedAddress') %>"
options.CORE_SOLANA_WALLET_PROGRAM_ADDRESS = "0x0dd613b80b79792f2b77dbc1bc2a88a69da961324d890ed3aa9df8d517a500b3"           #gitleaks:allow
options.CORE_SOLANA_TOKEN_MINT_ADDRESS = "0xc6fa7af3bedbad3a3d65f36aabc97431b1bbe4c2d2f6e0e47ca60203452f5d61"               #gitleaks:allow
options.CORE_SOLANA_TOKEN_PROGRAM_ADDRESS = "0x06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9"            #gitleaks:allow
options.CORE_SOLANA_ASSOCIATED_TOKEN_PROGRAM_ADDRESS = "0x8c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f859" #gitleaks:allow
# ---------- Wormhole Chain Ids ---------- #
options.CORE_WORMHOLE_CHAIN_ID_ARBITRUM = "23"
options.CORE_WORMHOLE_CHAIN_ID_BASE = "30"
options.CORE_WORMHOLE_CHAIN_ID_ETHEREUM = "2"
options.CORE_WORMHOLE_CHAIN_ID_OPTIMISM = "24"
options.CORE_WORMHOLE_CHAIN_ID_POLYGON = "5"
options.CORE_WORMHOLE_CORE = "0x7A4B5a56256163F07b2C80A7cA55aBE66c4ec4d7"
# ---------- Circle Constants ---------- #
options.CORE_CCTP_DOMAIN_ARBITRUM = "3"
options.CORE_CCTP_DOMAIN_BASE = "6"
options.CORE_CCTP_DOMAIN_ETHEREUM = "0"
options.CORE_CCTP_DOMAIN_OPTIMISM = "2"
options.CORE_CCTP_DOMAIN_POLYGON = "7"

# ---------- Setting Post deployment parameters  ---------- #
# [invoke.setInfinexProtocolConfigBeaconFee]
# target = ["infinex.InfinexProtocolConfigBeacon"]
# func = "setWithdrawalFeeUSDC"
# args = ["<%= settings.WITHDRAWAL_FEE_USDC %>"]
# from = "<%= settings.DEPLOYER %>"
# depends = ["clone.infinex"]

[invoke.setTrustedRecoveryKeeper]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setTrustedRecoveryKeeper"
args = ["<%= settings.TRUSTED_RECOVERY_KEEPER %>", true]
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

[invoke.TransferOwnershipNewBeacon]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "transferOwnership"
args = ["<%= settings.MULTISIG %>"]
fromCall.func = "owner"

# [invoke.AcceptOwnershipNewBeacon]
# target = ["infinex.InfinexProtocolConfigBeacon"]
# func = "acceptOwnership"
# from = "<%= settings.MULTISIG %>"
# depends = ["invoke.TransferOwnershipNewBeacon"]

[invoke.TransferOwnershipAppRegistry]
target = ["infinex.AppRegistry"]
func = "transferOwnership"
args = ["<%= settings.MULTISIG %>"]
fromCall.func = "owner"

# [invoke.AcceptOwnershipAppRegistry]
# target = ["infinex.AppRegistry"]
# func = "acceptOwnership"
# from = "<%= settings.MULTISIG %>"
# depends = ["invoke.TransferOwnershipAppRegistry"]