name = "infinex-multichain"
version = "1.1.0"
preset = "O2"
description = "Infinex MultiChain Deployments"
#   ./run pnpm cannon build infinex-multichain/mainnets/infinex-multichain.toml --chain-id 1 --private-key 
# CANNON_ETHERSCAN_API_URL=https://api.etherscan.io/api  ./run pnpm cannon verify infinex-multichain:1.0.0@O2 --chain-id 1 --api-key  

[var.deploy]
DEPLOYER = "0x7Bb5DfC8622D296bF259c951490dC9E1Cc0951d3"
REVENUE_POOL = "0x1548c73d55e3D3000B5351852790B05fC67d2B28"
MULTI_SIG = "0x1548c73d55e3D3000B5351852790B05fC67d2B28"
WITHDRAWAL_FEE_USDC = "<%= parseUnits(String(0), 6) %>"
TRUSTED_RECOVERY_KEEPER = "0x07D19647E3273cfa905E762D7cE45D0f5c661cC1"


[clone.infinex]
options.SALT = "INFINEX_1_0_0"
options.DEPLOYER = "<%= settings.DEPLOYER %>"
options.REVENUE_POOL = "<%= settings.REVENUE_POOL %>"
options.MINIMUM_BRIDGE_AMOUNT =  "<%= parseUnits(String(50), 6) %>"
options.USDC = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
options.CIRCLE_BRIDGE = "0xbd3fa81b58ba92a82136038b25adec7066af3155"
options.CIRCLE_MINTER = "0xc4922d64a24675e16e1586e3e3aa56c06fabe907"
options.DEFAULT_DESTINATION_CCTP_DOMAIN = "6"
options.WORMHOLE_CIRCLE_BRIDGE = "0xAaDA05BD399372f0b0463744C09113c137636f6a"
options.DEFAULT_DESTINATION_WORMHOLE_CHAIN_ID = "30" # set the default domain to base for keeper bridging

# ------- Solana Vars ------- #
options.SOLANA_CCTP_DESTINATION_DOMAIN = "5"
options.SOLANA_WALLET_SEED =  "<%= hexlify('wallet_authority') %>"
options.SOLANA_FIXED_PDA_SEED = "<%= hexlify('ProgramDerivedAddress') %>"
options.SOLANA_WALLET_PROGRAM_ADDRESS = "0x0aacda33cf045c0dd658e67c577bade83951034129e2201bb7dfd6372c6e9e64" #gitleaks:allow
options.SOLANA_TOKEN_MINT_ADDRESS = "0xc6fa7af3bedbad3a3d65f36aabc97431b1bbe4c2d2f6e0e47ca60203452f5d61" #gitleaks:allow
options.SOLANA_TOKEN_PROGRAM_ADDRESS = "0x06ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9" #gitleaks:allow
options.SOLANA_ASSOCIATED_TOKEN_PROGRAM_ADDRESS = "0x8c97258f4e2489f1bb3d1029148e0d830b5a1399daff1084048e7bd8dbe9f859" #gitleaks:allow

# ---------- Wormhole Chain Ids ---------- #
options.WORMHOLE_CHAIN_ID_ARBITRUM = "23"
options.WORMHOLE_CHAIN_ID_BASE = "30"
options.WORMHOLE_CHAIN_ID_ETHEREUM = "2"
options.WORMHOLE_CHAIN_ID_OPTIMISM = "24"
options.WORMHOLE_CHAIN_ID_POLYGON = "5"
source = "infinex:1.1.0@O2"
target = "infinex:1.1.0@O2"

# ---------- Setting Post deployment parameters  ---------- #
[invoke.setInfinexProtocolConfigBeaconFee]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setWithdrawalFeeUSDC"
args = [
    "<%= settings.WITHDRAWAL_FEE_USDC %>",
    ]
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

[invoke.setTrustedRecoveryKeeper]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setTrustedRecoveryKeeper"
args = [
    "<%= settings.TRUSTED_RECOVERY_KEEPER %>", 
    true
    ]
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

[invoke.setFundsRecoveryActive]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "setFundsRecoveryActive"
args = []
from = "<%= settings.DEPLOYER %>"
depends = ["clone.infinex"]

# ---------- Update Factory and old beacons  ---------- #
# [invoke.AccountFactoryUpdateInfinexProtocolConfigBeacon]
# target = ["infinex.AccountFactory"]
# func = "updateInfinexProtocolConfigBeacon"
# args = ["<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"]
# fromCall.func = "owner"
# depends = ["clone.infinex","invoke.OldBeaconSetLatestInfinexProtocolConfigBeacon"]

[pull.infinexOld]
source = "infinex-multichain:1.0.0@O2"

# [invoke.OldBeaconSetLatestInfinexProtocolConfigBeacon]
# target = ["infinexOld.infinex.InfinexProtocolConfigBeacon"]
# func = "setLatestInfinexProtocolConfigBeacon"
# args = ["<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"]
# fromCall.func = "owner"

# ---------- Transfer and accept ownership of new contracts  ---------- #

[invoke.transferOwnershipNewBeacon]
target = ["infinex.InfinexProtocolConfigBeacon"]
func = "transferOwnership"
args = ["<%= settings.MULTI_SIG %>"]
from = "<%= settings.DEPLOYER %>"

# [invoke.acceptOwnershipNewBeacon]
# target = ["infinex.InfinexProtocolConfigBeacon"]
# func = "acceptOwnership"
# from = "<%= settings.MULTI_SIG %>"
# depends = ["invoke.transferOwnershipNewBeacon"]

# [invoke.AccountFactoryInitialize]
# target = ["infinex.AccountFactory"]
# func = "initialize"
# args = [
#     "<%= imports.infinex.contracts.InfinexProtocolConfigBeacon.address %>"
# ]
# from = "<%= settings.DEPLOYER %>"
# depends = ["clone.infinex"]
