name = "infinex-patron"
preset = "patron-purchase"
version = "1.0.0"
description = "Smart Contracts used for Infinex Patron Purchase App"

# pnpm cannon build infinex-patron/patron-purchase-app/mainnets/infinex-patron.base.toml --chain-id 8453 --dry-run

[var.PATRON]
depends = []
PATRON_DEPLOYER = "0xCD8AeD7674B10e1b6c8281B91259CEDE1BFE4a19"
AUTHORIZED_SIGNER = "0x4f61e5795709C7A7E950Ea48c1cF5035F596d8A0"
# AUTHORIZED MULTISIGS
MULTISIG_0 = "0x6021A2F65E2E1655510120F49f2020469d9CFF07"
# AUTHORIZED TOKENS
USDC_TOKEN = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913" 
USDBC_TOKEN = "0xd9aaec86b65d86f6a7b5b1b0c42ffa531710b6ca"
DAI_TOKEN = "0x50c5725949a6f0c72e6c4a641f24049a917db0cb"
ETHER = "0x0000000000000000000000000000000000000000"

[clone.infinexPatronPurchase]
depends = ['var.PATRON']
options.PATRON_DEPLOYER = "<%= settings.PATRON_DEPLOYER %>"
options.PATRON_PURCHASE_SALT = "PATRON_PURCHASE_SALT_1_0_13"
source = "infinex:1.0.1@patron-purchase"
target = "infinex:1.0.1@patron-purchase"

[invoke.PatronPointOfPurchaseInitialize]
target = ["infinexPatronPurchase.PatronPointOfPurchase"]
func = "initialize"
args = [
    "<%= settings.PATRON_DEPLOYER %>",
    "<%= settings.MULTISIG_0 %>", # if funds get stuck, this is where they go.
    [
        "<%= settings.AUTHORIZED_SIGNER %>",
    ],
    [
        "<%= settings.USDC_TOKEN %>",
        "<%= settings.USDBC_TOKEN %>",
        "<%= settings.DAI_TOKEN %>",
        "<%= settings.ETHER %>"
    ],
    [
        "<%= settings.MULTISIG_0 %>" # Funds destination for route 0.
    ],
]
depends = [
    "clone.infinexPatronPurchase",
]

# Transfer Ownership

[invoke.transferOwnershipPatronPurchaseAppBeacon]
target = ["infinexPatronPurchase.PatronPurchaseAppBeacon"]
func = "transferOwnership"
args = ["<%= settings.MULTISIG_0 %>"]
from = "<%= settings.PATRON_DEPLOYER %>"

[invoke.transferOwnershipPatronPointOfPurchase]
target = ["infinexPatronPurchase.PatronPointOfPurchase"]
func = "transferOwnership"
args = ["<%= settings.MULTISIG_0 %>"]
from = "<%= settings.PATRON_DEPLOYER %>"
